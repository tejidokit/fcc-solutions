Basic JavaScript: Record Collection
// Setup
var collection = {
  2548: {
    albumTitle: 'Slippery When Wet',
    artist: 'Bon Jovi',
    tracks: ['Let It Rock', 'You Give Love a Bad Name']
  },
  2468: {
    albumTitle: '1999',
    artist: 'Prince',
    tracks: ['1999', 'Little Red Corvette']
  },
  1245: {
    artist: 'Robert Palmer',
    tracks: []
  },
  5439: {
    albumTitle: 'ABBA Gold'
  }
};

// SOLUTION
function updateRecords(collection, id, prop, value) {
  if (prop !== "tracks" && value !== "") {
    collection[id][prop] = value;
  } 
  if (prop === "tracks" && !collection[id].hasOwnProperty("tracks")) {
    collection[id][prop] = [value]
  } 
  if (prop === "tracks" && value !== "") {
    collection[id][prop].push(value);
  } 
  if (value === "") {
    delete collection[id][prop];
  }
  return collection;
  
}

updateRecords(collection, 5439, 'artist', 'ABBA');

##############################################

Basic JavaScript: Iterate with JavaScript While Loops

Add the numbers 5 through 0 (inclusive) in descending order to myArray using a while loop.
You should be using a while loop for this.
myArray should equal [5,4,3,2,1,0].

// SOLUTION
var myArray = [];
var i = 5;
while(i >= 0) {
  myArray.push(i);
  i--;
}

##############################################

Basic JavaScript: Iterate with JavaScript For Loops

Use a for loop to work to push the values 1 through 5 onto myArray.
You should be using a for loop for this.
myArray should equal [1,2,3,4,5].

// Setup
var myArray = [];

// SOLUTION
for (var i = 1; i <= 5; i++) {
    myArray.push(i);
}
          OR

for (var i = 1; i < 6; i++) {
    myArray.push(i);
}

##############################################

Basic JavaScript: Iterate Odd Numbers With a For Loop

Push the odd numbers from 1 through 9 to myArray using a for loop.
You should be using a for loop for this.
myArray should equal [1,3,5,7,9].

// Setup
var myArray = [];

// SOLUTION
for (var i = 1; i <= 9; i += 2) {
    myArray.push(i);
}

        or
for (var i = 1; i < 10; i += 2) {
    myArray.push(i);
}

##############################################

Basic JavaScript: Count Backwards With a For Loop
Push the odd numbers from 9 through 1 to myArray using a for loop.
You should be using a for loop for this.
You should be using the array method push.
myArray should equal [9,7,5,3,1].

// Setup
var myArray = [];

// SOLUTION
for (var i = 9; i >= 1; i -= 2) {
    myArray.push(i);
}

##############################################

Basic JavaScript: Iterate Through an Array with a For Loop

Declare and initialize a variable total to 0. Use a for loop to add the value of each element of the myArr array to total.
total should be declared and initialized to 0.
total should equal 20
You should use a for loop to iterate through myArr.
You should not attempt to directly assign the value 20 to total.

// Setup
var myArr = [ 2, 3, 4, 5, 6];

// SOLUTION
var total = 0;
for (var i = 0; i < myArr.length; i++) {
    total = total + myArr[i];
}

##############################################

Basic JavaScript: Nesting For Loops
Modify function multiplyAll so that it returns the product of all the numbers in the sub-arrays of arr.
multiplyAll([[1],[2],[3]]) should return 6
multiplyAll([[1,2],[3,4],[5,6,7]]) should return 5040
multiplyAll([[5,1],[0.2, 4, 0.5],[3, 9]]) should return 54

function multiplyAll(arr) {
  var product = 1;

  // SOLUTION ###############
for (var i=0; i < arr.length; i++) {
  for (var j=0; j < arr[i].length; j++) {
    product = product * arr[i][j];
  }
}
  // Only change code above this line ###############
  return product;
}

multiplyAll([[1,2],[3,4],[5,6,7]]);


##############################################
Basic JavaScript: Iterate with JavaScript Do...While Loops
Change the while loop in the code to a do...while loop so the loop will push only the number 10 to myArray, and i will be equal to 11 when your code has finished running.
You should be using a do...while loop for this exercise.
myArray should equal [10].
i should equal 11

// Setup
var myArray = [];
var i = 10;

// SOLUTION ###############

do {
  myArray.push(i);
  i++;
} while (i <= 10);

##############################################
Basic JavaScript: Replace Loops using Recursion
Write a recursive function, sum(arr, n), that returns the sum of the first n elements of an array arr.
sum([1], 0) should equal 0.
sum([2, 3, 4], 1) should equal 2.
sum([2, 3, 4, 5], 3) should equal 9.
Your code should not rely on any kind of loops (for or while or higher order functions such as forEach, map, filter, or reduce.).
You should use recursion to solve this problem.

function sum(arr, n) {
  if(n <= 0) {
    return 0;
  } else {
    return sum(arr, n - 1) + arr[n - 1];
  }
}


##############################################
Basic JavaScript: Profile Lookup

lookUpProfile("Kristian", "lastName") should return "Vos"
lookUpProfile("Sherlock", "likes") should return ["Intriguing Cases", "Violin"]
lookUpProfile("Harry", "likes") should return an array
lookUpProfile("Bob", "number") should return "No such contact"
lookUpProfile("Bob", "potato") should return "No such contact"
lookUpProfile("Akira", "address") should return "No such property"

// Setup
var contacts = [
    {
        "firstName": "Akira",
        "lastName": "Laine",
        "number": "0543236543",
        "likes": ["Pizza", "Coding", "Brownie Points"]
    },
    {
        "firstName": "Harry",
        "lastName": "Potter",
        "number": "0994372684",
        "likes": ["Hogwarts", "Magic", "Hagrid"]
    },
    {
        "firstName": "Sherlock",
        "lastName": "Holmes",
        "number": "0487345643",
        "likes": ["Intriguing Cases", "Violin"]
    },
    {
        "firstName": "Kristian",
        "lastName": "Vos",
        "number": "unknown",
        "likes": ["JavaScript", "Gaming", "Foxes"]
    }
];


function lookUpProfile(name, prop){
  
// SOLUTION ######### 
for (var i = 0; i < contacts.length; i++) {
    if (contacts[i].firstName === name) {
        return contacts[i][prop] || "No such property";
    }
}
return "No such contact";
// Only change code above this line
}
lookUpProfile("Akira", "likes");

// Cham's SOLUTION ######
  for(let i = 0; i < contacts.length; i++) {
    if(contacts[i]["firstName"] === name && 
        contacts[i].hasOwnProperty(prop)) return contacts[i][prop];
  }
  for(let i = 0; i < contacts.length; i++) {
    if(contacts[i]["firstName"] !== name) return "No such contact";
    if(!contacts[i].hasOwnProperty(prop)) return "No such property"
  }



##############################################

Basic JavaScript: Generate Random Fractions with JavaScript

Change randomFraction to return a random number instead of returning 0.

randomFraction should return a random number.
The number returned by randomFraction should be a decimal.
You should be using Math.random to generate the random decimal number.

function randomFraction() {

  // Only change code below this line
  // SOLUTION ######### 
  return Math.random();

  // Only change code above this line
}

##############################################

Basic JavaScript: Generate Random Whole Numbers with JavaScript

Use this technique to generate and return a random whole number between 0 and 9.
The result of randomWholeNum should be a whole number. 
You should use Math.random to generate a random number.
You should have multiplied the result of Math.random by 10 to make it a number that is between zero and nine.
Use another function, Math.floor() to round the number down to its nearest whole number.

var randomNumberBetween0and19 = Math.floor(Math.random() * 20);

function randomWholeNum() {

// SOLUTION #########
  return Math.floor(Math.random() * 10);
}

console.log(randomWholeNum());